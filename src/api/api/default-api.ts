/* tslint:disable */
/* eslint-disable */
/**
 * Todo example
 * The todo API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "../base";
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString,
} from "../common";
import type { Configuration } from "../configuration";
// @ts-ignore
// @ts-ignore
// @ts-ignore
import { CreateTodoDto, Todo, UpdateTodoDto } from "../models";

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Hello!
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a todo
         * @summary
         * @param {CreateTodoDto} createTodoDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerCreate: async (
            createTodoDto: CreateTodoDto,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'createTodoDto' is not null or undefined
            assertParamExists("todoControllerCreate", "createTodoDto", createTodoDto);
            const localVarPath = `/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(createTodoDto, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a todo by id
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("todoControllerGet", "id", id);
            const localVarPath = `/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List todos
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a todo
         * @summary
         * @param {string} id
         * @param {UpdateTodoDto} updateTodoDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerUpdate: async (
            id: string,
            updateTodoDto: UpdateTodoDto,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("todoControllerUpdate", "id", id);
            // verify required parameter 'updateTodoDto' is not null or undefined
            assertParamExists("todoControllerUpdate", "updateTodoDto", updateTodoDto);
            const localVarPath = `/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(updateTodoDto, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         * Hello!
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a todo
         * @summary
         * @param {CreateTodoDto} createTodoDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerCreate(
            createTodoDto: CreateTodoDto,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerCreate(createTodoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a todo by id
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerGet(
            id: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List todos
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerList(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a todo
         * @summary
         * @param {string} id
         * @param {UpdateTodoDto} updateTodoDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerUpdate(
            id: string,
            updateTodoDto: UpdateTodoDto,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerUpdate(id, updateTodoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration);
    return {
        /**
         * Hello!
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<Array<number>> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a todo
         * @summary
         * @param {CreateTodoDto} createTodoDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerCreate(createTodoDto: CreateTodoDto, options?: any): AxiosPromise<Todo> {
            return localVarFp.todoControllerCreate(createTodoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a todo by id
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerGet(id: string, options?: any): AxiosPromise<Todo> {
            return localVarFp.todoControllerGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List todos
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerList(options?: any): AxiosPromise<Array<Todo>> {
            return localVarFp.todoControllerList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update a todo
         * @summary
         * @param {string} id
         * @param {UpdateTodoDto} updateTodoDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerUpdate(id: string, updateTodoDto: UpdateTodoDto, options?: any): AxiosPromise<Todo> {
            return localVarFp
                .todoControllerUpdate(id, updateTodoDto, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Hello!
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    appControllerGetHello(options?: AxiosRequestConfig): AxiosPromise<Array<number>>;

    /**
     * Create a todo
     * @summary
     * @param {CreateTodoDto} createTodoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    todoControllerCreate(createTodoDto: CreateTodoDto, options?: AxiosRequestConfig): AxiosPromise<Todo>;

    /**
     * Get a todo by id
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    todoControllerGet(id: string, options?: AxiosRequestConfig): AxiosPromise<Todo>;

    /**
     * List todos
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    todoControllerList(options?: AxiosRequestConfig): AxiosPromise<Array<Todo>>;

    /**
     * Update a todo
     * @summary
     * @param {string} id
     * @param {UpdateTodoDto} updateTodoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    todoControllerUpdate(id: string, updateTodoDto: UpdateTodoDto, options?: AxiosRequestConfig): AxiosPromise<Todo>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Hello!
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .appControllerGetHello(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a todo
     * @summary
     * @param {CreateTodoDto} createTodoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todoControllerCreate(createTodoDto: CreateTodoDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .todoControllerCreate(createTodoDto, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a todo by id
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todoControllerGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .todoControllerGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * List todos
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todoControllerList(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .todoControllerList(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a todo
     * @summary
     * @param {string} id
     * @param {UpdateTodoDto} updateTodoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todoControllerUpdate(id: string, updateTodoDto: UpdateTodoDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .todoControllerUpdate(id, updateTodoDto, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
